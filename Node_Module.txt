# 노드의 모듈 개념
 노드로 개발한 어플리케이션을 이루는 기본 조각
 쉽게 말해 '부품'의 개념
 관련된 코드들을 모아서 캡슐화 해놓은 것
 
# 노드의 모듈화 개념
 노드는 확장성을 위해 모듈 구조를 통해 어플리케이션을 구성하도록함
 모듈이란 어플리케이션을 이루는 기본단위로, 다수의 클래스와 이를 통해 생성한 객체 등으로 구성됨
 기본적으로 노드의 모듈은 자바스크립트 파일 하나와 1:1로 맵핑됨

# 전역 객체의 개념
 전역 객체는 어디에서나 사용할 수 있는 객체를 말함
 클라이언트 자바스크립트에서의 window, document와 같은 객체 < 
 노드는 '서버사이드'에서 동작하는데 'global'이라는 전역 객체가 존재함
 'global' 전역객체에는 모듈을 불러올때 사용하는 require()을 비롯하여 setTimeout(), console.log() 등을 포함함
 
# 모듈의 종류
 기본적으로 포함되어 있는 지 여부에 따라 [기본모듈, 확장모듈]로 구분됨
 모듈을 설치한 위치와 사용 가능 범위에 따라 [범용모듈, 복합모듈]로 구분됨
 C/C++로 구현되었는지, 자바스크립트로 구현되었는지에 따라 [일반모듈, 네이티브모듈]로 구분됨
 복수의 파일이 하나의 모듈을 구성할 경우 [복합모듈]
 
# 기본 모듈과 확장 모듈
 기본모듈 : 노드를 설치하면 기본으로 설치되는 모듈
  - 파일 입출력, 이벤트 관리, HTTP프로토콜 관리 등
  - 노드의 비동기 입출력 처리를 위한 기본적인 기능을 제공
 확장모듈 : 노드의 기능을 확장하기 위한 것
  - 더 쉬운 HTTP 서버 생성, 기본 파일 입출력에서 제공하지 않는 기능 추가 등
  - 노드를 확장하고 더 편리하게 사용하기 위한 모듈
  - express와 같은 모듈들처럼 하나의 프레임워크로서 제공되기도함
  - mongodb를 사용하기 위한 mongoose나 mongolian처럼 다른 기술을 손쉽게 끌어와 사용할 수 있게 도와주는 역할도 함
  
# 일반 모듈과 네이티브 모듈
 일반모듈 : 노드의 모듈 인터페이스를 통해 간단히 자바스크립트로 개발된 모듈
  - 같은 기능을 수행하는 네이티브 모듈과 일반 모듈이 있다면 대체로 네이티브 모듈의 성능이 더 나음
 네이티브모듈 : 네이티브 프로그래밍 언어인 C/C++로 노드의 모듈을 개발한 경우
  - .node라는 확장자를 가졌으면 네이티브 모듈로 컴파일된 것이라고 볼 수 있음

# 글로벌 모듈과 로컬 모듈
 글로벌모듈 : 기본 모듈을 포함하여 어디서든 사용할 수 있도록 설치한 확장 모듈
 로컬 모듈 : 해당 어플리케이션에서만 사용하기 위해 설치한 확장모듈이나 개발자가 개발한 모듈
  - 확장 모듈을 글로벌 모듈로 사용하려면 설치 시 글로벌옵션(-g)을 이용하면 됨
  
# 복합모듈
 내부 모듈이나 데이터 파일, 템플릿, 테스트 코드 등을 포함하는 모듈
  - 다양한 파일을 포함하기 때문에 모듈을 구성하는 단위가 폴더이며 내부적으로도 폴더를 가질 수 있음
  - require() 메소드가 이런 폴더 단위의 모듈을 인식하려면 index.js 파일이나 package.json 파일 중 하나가 반드시 있어야함
  
# 모듈 식별자
 노드의 모듈 이름으로는 확장자 없는 전체 경로를 사용함
 모듈은 파일과 1:1로 대응하기 때문에 .js나 .node라는 확장자를 가지지만 모듈을 불러들일 때는 파일 이름만 사용하면 되기 때문
 모듈의 식별자는 크게 '상대적 식별자'와 '절대적 식별자', 그리고 '최상위 레벨식별자' 등 3가지가 있음'
 
# 상대적 식별자
 현재 위치를 기준으로 상대적인 기준에 있는 모듈을 찾는 식별자
  - 상대경로랑 유사하나, ./를 생략하면 현재 위치에서 모듈을 찾지 않음
  ex) require('./sample_module');
  
# 절대적 식별자
 절대 위치를 기준으로 그 경로에 맞는 모듈을 찾는 식별자
  - 절대경로랑 비슷함
  ex) require('/usr/local/node_modules/sample_module/sample_module');

# 최상위 레벨 식별자
 아무것도 입력하지 않고 모듈 이름만 입력하면 최상위 레벨 식별자로 인식하고 설치된 전체 확장 모듈이나 기본 모듈 중에서 해당 모듈 이름을 검색하여 로드함
 ex) require('sample_module');
 * sample_module 모듈 식별자를 찾는순서!!
  - 기본모듈에서 찾을 수 없는 모듈이라면 상위 디렉토리를 차례대로 탐색함
  ex) /home/dev/nodejs_project/node_modules/sample_moudle.js
	  /home/dev/node_modules/sample_module.js
	  /home/node_modules/sample_module.js
	  /node_modules/sample_module.js
	  이와 같은 순서로 탐색함
	  
# require() 메소드와 module.exports !!중요!!
 require() 메소드는 모듈 식별자인 module.exports를 이용해 모듈이 제공하는 함수나 객체 등을 반환함
 모듈을 사용하는 파일에서는 require()메소드로 다른 자바스크립트 파일을 불러와서 module.exports로 허용된 변수나 함수를 사용할 수 있다
 
# 전역객체 : Global
 전역 객체는 어디에서나 사용할 수 있는 객체임

# Node.js에서 가장 많이 쓰이는 전역객체
 * console 객체
  콘솔화면과 관련된 기능을 가진 객체
  console.log():콘솔에 로그 메세지 출력
  console.time(label):시간 측정 시작
  console.timeEnd(label):시간 측정 종료
 * Process 객체
  프로그램과 관련된 기능을 다루는 객체
 * Exports 객체
  exports 객체를 통해 만들고자 하는 메소드를 정의하고, 사용하고자 하는 다른 js 파일에서 require() 함수를 통해 js파일 파일을 불러와 정의한 메소드 사용가능

# OS 모듈
 운영체제와 시스템의 정보를 가져올 수 있는 모듈
 CPU, 메모디, 디스크 용량이 얼마나 남았는지 확인할 수 있음
 참조 : https://nodejs.org/api/os.html
  
# Utility 모듈
 node.js의 보조적인 기능 중 유용한 기능만을 모아놓은 모듈
 참조 : https://nodejs.org/api/util.html
 
# File System 모듈 !!중요!!
 파일 처리와 관련된 작업을 하는 모듈
 fs 모듈이라고 줄여서 부름
 Sync라는 이름이 붙어있는 메소드가 동기방식
  - fs.readFile(filename, [options], callback) : filename의 파일을 [options]의 방식으로 읽은 후 callback으로 전달된 함수를 호출합니다. (비동기적) 
  - fs.readFileSync(filename, [options]) : filename의 파일을 [options]의 방식으로 읽은 후 문자열을 반환합니다.(동기적)		
  - fs.writeFile(filename, data, [options], callback) : filename의 파일에 [options]의 방식으로 data 내용을 쓴 후 callback 함수를 호출합니다.(비동기적) 
  - fs.writeFileSync(filename, data, [options]) : filename의 파일에 [options]의 방식으로 data 내용을 씁니다.(동기적)
 참조 : https://nodejs.org/api/fs.html

# Event 모듈
 이벤트를 활용하는 객체에는 해당 이벤트가 발생할 때 대응하여 동작하는 콜백 함수를 가지는데, 이러한 함수를 이벤트 리스너라고함
 이벤트 모듈을 사용하려면 require() 메소드를 이용하여 로드하고, 그 객체를 통해  EventEmitter 클래스를 로드하여 사용하는게 일반적
 * events 객체의 메소드
	emitter.addListener(event, listener) : on() 메소드와 같습니다. 이벤트를 생성하는 메소드입니다.
	emitter.on(event, listener) : addListener()과 동일합니다. 이벤트를 생성하는 메소드입니다.
	emitter.once(event, listener) : 이벤트를 한 번만 연결한 후 제거합니다.
	emitter.removeListener(event, listener) : 특정 이벤트의 특정 이벤트 핸들러를 제거합니다. 이 메소드를 이용해 리스너를 삭제하면 리스너 배열의 인덱스가 갱신되니 주의해야 합니다.
	emitter.removeAllListeners([event]) : 모든 이벤트 핸들러를 제거합니다.
	emitter.setMaxListeners(n) : n으로 한 이벤트에 최대허용 개수를 정해줍니다. node.js는 기본값으로 한 이벤트에 10개의 이벤트 핸들러를 작성할 수 있는데, 11개 이상을 사용하고 싶다면 n값을 넘겨주면 됩니다. n값으로 0을 넘겨 주면 연결 개수 제한이 사라집니다.
	emitter.emit(eventName[, ...args]) : 이벤트를 발생시킵니다. 
 참조 : https://nodejs.org/api/events.html
 
# 노드에서의 상속
 자바스크립트와 동일하게 상속할 수 있지만, 좀 더 편리하게 상속할 수 있도록 util모듈을 통해 별도의 메소드를 지원함
 util.inherits() 메소드를 이용해서 상속 가능
 util.ingerits(A,B)  <-- A가 B를 상속받음
 
# npm 이란?
 Node.js에서 사용 가능한 모듈들을 패키지화시켜 모아놓은 것
 Node Package Modules의 약자임
 npm registry 사이트 : http://npmjs.org/  (중앙 저장소에 등록된 모든 확장 모듈을 검색하고 확인할 수 있음)
 * 대표 명령어
  - npm install [모듈명(@버전)] 
  - npm search [모듈명]
  - npm info [모듈명]
  
# 확장모듈
 npm list / npm list -g 으로 개발중인 어플리케이션에 설치된 확장 모듈을 확인할 수 있음
 npm update [모듈명] / npm update [모듈명] -g 으로 설치된 모듈을 최신 버전으로 업데이트 할 수 있음
 npm update 으로 설치된 모든 모듈을 최신 버전으로 업데이트 할 수 있음
 npm uninstall [모듈명] npm uninstall [모듈명] -g 으로 확장 모듈을 삭제할 수 있음

# package.json
 기본적으로 프로젝트에 대한 명세
 npm init 명령을 통해서 자동으로 생성가능
 해당 어플리케이션을 위해 사용한 확장 모듈에 대한 정보는 npm install -save를 통해 자동으로 추가할 수 있음
 
# 확장모듈 - nodemon
 node monitor의 약자임
 노드가 실행하는 파일이 속한 디렉터리를 감시하고 있다가 파일이 수정되면 자동으로 노드 어플리케이션을 재시작함
 개발 중인 노드 어플리케이션의 소스 코드를 수정할 때마다 매번 노드 명령어를 통해 새로 시작할 필요가 없음
 npm install nodemon -g 로 설치 
 사용법 : node로 어플리케이션을 실핼하는 것 처럼 nodemon으로 어플리케이션을 실행하면 됨 ex) nodemon main.js
 
# express 프레임워크
 경량화 웹 개발 프레임워크임
 기본모듈중 하나인 http 모듈을 이용하여 웹 서버를 구축하고 데이터를 표시하는 방식을 좀 더 추상화하여 웹 서비스나 웹 어플리케이션 개발을 더 편리하고 수월하게 할 수 있도록 다양한 API를 제공함
 공홈 : http://expressjs.com/
 한국어 : http://expressjs.com/ko/
 npm install express -g 로 설치
 

























